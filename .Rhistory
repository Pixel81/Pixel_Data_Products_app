ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all - efit
all$coef - efit$coef
all$coefficients - efit$coefficients
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
rm=list(ls())
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(training)
View(training)
rm(list=ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
histogram(training$SuperPlasticizer)
plot(training$SuperPlasticizer)
hist(training$SuperPlasticizer)
View(training)
hist(training$row.names,training$SuperPlasticizer)
hist(as.numeric(training$row.names),training$SuperPlasticizer)
class(training$row.names)
as.numeric(training$row.names)
index <- training$row.names * 1
head(training$row.names)
head(training)
plot(training$SuperPlasticizer)
hist(training$SuperPlasticizer,training$SuperPlasticizer)
hist([1:774],training$SuperPlasticizer)
x <- c(1:774)
x
hist(x,training$SuperPlasticizer)
hist(training$SuperPlasticizer,x)
class(training$SuperPlasticizer)
summary(training)
hist(as.numeric(training$SuperPlasticizer),x)
hist(x,as.numeric(training$SuperPlasticizer))
plot(as.numeric(training$SuperPlasticizer)
)
qplot(training$SuperPlasticizer)
summary(training$SuperPlasticizer)
summary(training)
rm(list=ls())
source('~/.active-rstudio-document')
summary(training)
View(training)
training[[1,]]
training[[1]]
trainingIL <- training[ , grep("IL", colnames(training))]
View(trainingIL)
trainingIL <- training[ , grep("IL*", colnames(training))]
View(trainingIL)
trainingIL <- training[ , grep("IL", colnames(training))]
View(trainingIL)
trainingIL2 <- trainingIL[ ,1:12]
View(trainingIL2)
preProcess(trainingIL2)
modelFIt <- train(type ~ ., data = training,)
modelFIt <- train(type ~ ., data = training,preProcess = c("center","scale"),method="glm")
modelFIt <- train(. ~ ., data = training,preProcess = c("center","scale"),method="glm")
modelFIt <- train(data = training,preProcess = c("center","scale"),method="glm")
summary(preProcess(trainingIL2))
modelFIt <- train(IL_11 ~ ., data = training,preProcess = c("center","scale"),method="glm")
modelFit
modelFit <- train(IL_11 ~ ., data = training,preProcess = c("center","scale"),method="glm")
modelFit <- train(IL_11 ~ ., data = trainingIL2,preProcess = c("center","scale"),method="glm")
ModelFit
modelFit
preProc <- preProcess(trainingIL2, method = "pca", thresh = 0.8)
preProc
rm(lsit=ls())
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainingIL <- training[ , grep("^IL", colnames(training))]
df <- data.frame(diagnosis, trainingIL)
df <- data.frame(training$diagnosis, trainingIL)
head(df)
df <- data.frame(training$diagnosis, trainingIL)
trainingIL <- training[ , grep("^IL", colnames(training))]
df <- data.frame(training$diagnosis, trainingIL)
preProc <- preProcess(trainingIL, method = "glm")
trainingIL <- training[ , grep("^IL", colnames(training))]
df <- data.frame(training$diagnosis, trainingIL)
modelFit <- train(diagnosis ~ ., method = "glm", data = df)
df
View(df)
modelFit <- train(training.diagnosis ~ ., method = "glm", data = df)
modelFit <- train(df[1] ~ ., method = "glm", data = df)
modelFit <- train(df[[1]] ~ ., method = "glm", data = df)
modelFit <- train(diagnosis ~ .,data = df,methode = "glm")
df$diagnosis
df$colnames
df$columnnames
df$ColNames
?df
trainingIL <- training[ , grep("^IL", colnames(training))]
diagnosis <- training$diagnosis
df <- data.frame(diagnosis, trainingIL)
View(df)
modelFit <- train(diagnosis ~ .,data = df,methode = "glm")
modelFit <- train(diagnosis ~ .,data = df,methode = "glm")
install.package("e1071")
install.packages("e1071")
modelFit <- train(diagnosis ~ .,data = df,methode = "glm")
modelFit
trainIL <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testIL <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainIL[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainIL[-13])
testPC <- predict(preProc,testIL[-13])
View(trainPC)
PCFit <- train(trainIL$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainIL$training.diagnosis~.,data=trainIL,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testIL)
confusionMatrix(PCTestPredict,testIL$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testIL$testing.diagnosis)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_Col <- training[ , grep("^IL", colnames(training))]
train_IL <- data.frame(training[IL_Col],training$diagnosis)
train_IL <- data.frame(training[,IL_Col],training$diagnosis)
train_IL <- data.frame(training[ , grep("^IL", colnames(training))]
,training$diagnosis)
test_IL <- data.frame(training[ , grep("^IL", colnames(testing))]
,testing$diagnosis)
test_IL <- data.frame(testing[ , grep("^IL", colnames(testing))]
,testing$diagnosis)
NotPCFit <- train(train_IL$training.diagnosis ~ .,data = train_IL,method="glm")
NotPCTestPredict <- predict(NotPCFit,newdata=test_IL)
confusionMatrix(NotPCTestPredict,test_IL$testing.diagnosis)
preProc <- preProcess(train_IL[-13],method="pca",thres=.8)
trainPC <- predict(preProc,train_IL[-13])
testPC <- predict(preProc,test_IL[-13])
PCFit <- train(train_IL$training.diagnosis~.,data=trainPC,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
confusionMatrix(PCTestPredict,test_IL$testing.diagnosis)
rm(list=ls())
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
source('~/Machine Learning - Q03.R')
View(segmentationOriginal)
View(segmentationOriginal)
training <- subset(segmentationOriginal, Case="Train")
set.seed(125)
View(training)
training <- subset(segmentationOriginal, Case == "Train")
testing <- subset(segmentationOriginal, Case == "Test")
?rpart
modelFit <- train( . ~ ., method = "rpart", data = segmentationOriginal)
modelFit <- train( Class ~ ., method = "rpart", data = segmentationOriginal)
print(modelFit$finalModel)
modelFit <- train( Class ~ ., method = "rpart", data = training)
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
modelFit <- train( Class ~ ., method = "rpart", data = training)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, Case == "Train")
testing <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
modelFit <- train( Class ~ ., method = "rpart", data = training)
print(modelFit$finalModel)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
install.packages("rpart.plot")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modFit <- train(Area ~ ., method="rpart", data = olive)
print(modelFit$finalModel)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
modelFit02 <- train(Area ~ ., method="rpart", data = olive)
print(modelFit02$finalModel)
fancyRpartPlot(modelFit02$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit02, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
modelFit03 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = train_IL, method = "glm", family = "binomial")
modelFit03 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
print(modelFit03$finalModel)
modelFit03$finalModel
missClass(testSA, predict(modelFit03, newdata = testSA))
missClass(trainSA, predict(modelFit03, newdata = trainSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA, predict(modelFit03, newdata = trainSA))
missClass(testSA, predict(model, newdata = testSA))
missClass(testSA, predict(modelFit03, newdata = testSA))
predict(modelFit03, newdata = testSA)
prediction <- predict(modelFit03, newdata = testSA)
prediction <- predict(modelFit03, newdata = testSA)
missClass(testSA, prediction)
prediction <- predict(modelFit03, newdata = testSA)
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
prediction <- predict(modelFit03, newdata = testSA)
missClass(testSA$chd, prediction)
prediction <- predict(modelFit03, newdata = trainSA)
missClass(trainSA$chd, prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
Head(vowel.test)
head(vowel.test)
class(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
class(vowel.test$y)
set.seed(33833)
modelFit04 <- train(y ~ . data = vowel.train, method = "rf", prox = TRUE)
modelFit04 <- train(y ~ . , data = vowel.train, method = "rf", prox = TRUE)
modelFit04
?varImp
varImp(modelFit04)
rm(list=ls())
train_Url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_Url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_Set <- read.csv(url(train_Url), na.strings = c("NA","#DIV/0!",""))
train_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_Set <- read.csv(url(train_Url), na.strings = c("NA","#DIV/0!",""))
test_Set <- read.csv(url(test_Url), na.strings = c("NA","#DIV/0!",""))
View(test_Set)
View(train_Set)
View(train_Set)
summary(train_set)
summary(train_Set)
modelFit <- train(Classe ~ ., method="rf", data = train_Url)
modelFit <- train(Classe ~ ., method="rf", data = train_Set)
modelFit <- train(classe ~ ., method="rf", data = train_Set)
trainingset <- train_Set[,colSums(is.na(train_Set)) == 0]
modelFit <- train(classe ~ ., method="rf", data = trainingset)
View(trainingset)
testingSet = adData[-trainingSplit,]
View(trainingset)
library(caret)
library(AppliedPredictiveModeling)
rm(list=ls())
train_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainSet01 <- read.csv(url(train_Url), na.strings = c("NA","#DIV/0!",""))
testSet01 <- read.csv(url(test_Url), na.strings = c("NA","#DIV/0!",""))
```
# Data discovery
summary(trainSet01)
trainSet02 <- trainSet01[,colSums(is.na(trainSet01)) == 0]
testSet02 <- testSet01[,colSums(is.na(testSet01)) == 0]
trainingSplit = createDataPartition(trainSet02, p =0.7, list=FALSE)
trainingSplit = createDataPartition(trainSet02$classe, p =0.7, list=FALSE)
trainingSet = adData[ trainingSplit,]
testingSet = adData[-trainingSplit,]
trainingSet = trainSet02[ trainingSplit,]
testingSet = trainSet02[-trainingSplit,]
treeModel <- train(classe ~ ., method = "rpart", data = trainingSet)
print(treeModel$finalModel)
library(rattle)
fancyRpartPlot(treeModel$finalModel)
View(trainSet02)
trainSet03 <- trainSet02[,c(1:7)]
testSet03 <- testSet02[,c(1:7)]
trainingSplit = createDataPartition(trainSet03$classe, p = 0.7, list=FALSE)
trainSet03 <- trainSet02[,-c(1:7)]
testSet03 <- testSet02[,-c(1:7)]
trainingSplit = createDataPartition(trainSet03$classe, p = 0.7, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
treeModel <- train(classe ~ ., method = "rpart", data = trainingSet)
print(treeModel$finalModel)
fancyRpartPlot(treeModel$finalModel)
predictionTree <- predict(treeModel, testingSet)
rpart.plot(treeModel, main="Classification Tree",
extra=102, under=TRUE, faclen=0)
confusionMatrix(predictionTree, testingSet$classe)
treeModel <- rpart(classe ~ .,
data = trainingSet,
method = "class") # Class method for classification tree
print(treeModel$finalModel)
fancyRpartPlot(treeModel$finalModel)
View(trainingSet)
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class") # Class method for classification tree
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
library(rpart)
set.seed(201281)
rm("treeModel")
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
print(treeModel$finalModel)
fancyRpartPlot(treeModel$finalModel)
predictionTree <- predict(treeModel, testingSet)
confusionMatrix(predictionTree, testingSet$classe)
View(trainingSet)
plot(training$classe, col="blue", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
plot(trainingSet$classe, col="blue", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
trainingSplit = createDataPartition(trainSet03$classe, p = 0.7, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
model1 <- rpart(classe ~ ., data=trainingSet, method="class")
rm("model1")
rm("treeModel")
treeModel <- rpart(trainingSet$classe ~ ., data = trainingSet, method = "class")
rm("treeModel")
?train
trainingSplit = createDataPartition(y = trainSet03$classe,
p = 0.7, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
trainingSplit = createDataPartition(y = trainSet03$classe,
p = 0.7, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
dim(trainingSet); dim(testingSet)
install.package("rpart")
install.packages("rpart")
install.packages("rpart")
class("trainingSet")
treeModel <- rpart(classe ~ ., data = trainingSet)
library("rpart", lib.loc="C:/Program Files/R/R-3.1.3/library")
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
library(rpart)
library(rattle)
train_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_Url = "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainSet01 <- read.csv(url(train_Url), na.strings = c("NA","#DIV/0!",""))
testSet01 <- read.csv(url(test_Url), na.strings = c("NA","#DIV/0!",""))
summary(trainSet01)
trainSet02 <- trainSet01[,colSums(is.na(trainSet01)) == 0]
testSet02 <- testSet01[,colSums(is.na(testSet01)) == 0]
trainSet03 <- trainSet02[,-c(1:7)]
testSet03 <- testSet02[,-c(1:7)]
set.seed(201281)
trainingSplit = createDataPartition(y = trainSet03$classe,
p = 0.7, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
dim(trainingSet); dim(testingSet)
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
treeModel <- train(classe ~ ., data = trainingSet, method = "rpart")
print(treeModel$finalModel)
fancyRpartPlot(treeModel$finalModel)
predictionTree <- predict(treeModel, testingSet)
confusionMatrix(predictionTree, testingSet$classe)
trainingSplit = createDataPartition(y = trainSet03$classe,
p = 0.75, list=FALSE)
trainingSet = trainSet03[ trainingSplit,]
testingSet = trainSet03[-trainingSplit,]
dim(trainingSet); dim(testingSet)
treeModel <- train(classe ~ ., data = trainingSet, method = "rpart")
print(treeModel$finalModel)
fancyRpartPlot(treeModel$finalModel)
predictionTree <- predict(treeModel, testingSet)
confusionMatrix(predictionTree, testingSet$classe)
rfModel <- train(classe ~ ., data = trainingSet, method = "rf")
class(trainSet01)
class(trainingSet)
treeModel <- rpart(classe ~ ., data = trainingSet)
print(treeModel$finalModel)
summary(treeModel)
print(treeModel)
fancyRpartPlot(treeModel)
treeModel <- rpart(classe ~ ., data = trainingSet, method = "class")
print(treeModel)
fancyRpartPlot(treeModel)
predictionTree <- predict(treeModel, testingSet)
confusionMatrix(predictionTree, testingSet$classe)
predictionTree <- predict(treeModel, testingSet, method = "class")
confusionMatrix(predictionTree, testingSet$classe)
predictionTree <- predict(treeModel, testingSet, type = "class")
confusionMatrix(predictionTree, testingSet$classe)
rfModel <- randomForest(classe ~ ., data = trainingSet, method = "class")
print(rfModel)
fancyRpartPlot(rfModel)
predictionRF <- predict(rfModel, testingSet, type = "class")
confusionMatrix(predictionrf, testingSet$classe)
confusionMatrix(predictionRF, testingSet$classe)
finalModel <- rfModel
prediction <- predict(finalModel, testSet02)
prediction
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction)
getwd()
ldaModel <- train(classe ~ ., data = trainingSet, method = "lda")
nbModel <- train(classe ~ ., data = trainingSet, method = "nb")
library(caret)
library(AppliedPredictiveModeling)
library(rpart)
library(rattle)
library(randomForest)
ldaModel <- train(classe ~ ., data = trainingSet, method = "lda")
nbModel <- train(classe ~ ., data = trainingSet, method = "nb")
install.packages("klaR")
install.packages("klaR")
plda <- predict(ldaModel, testingSet)
table(plda)
rm(list=ls())
install.packages("pdflatex")
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
x<-0
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
shiny::runApp('GitHub/Data products')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install.packages("slidify")
library(devtools)
install_github('slidify','ramnathv')
install.packages(c("BH", "caret", "curl", "forecast", "git2r", "HistData", "Hmisc", "httr", "jsonlite", "latticeExtra", "lubridate", "manipulate", "memoise", "munsell", "pbkrtest", "quantreg", "R6", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "rJava", "rmarkdown", "roxygen2", "rvest", "shiny", "testthat", "xtable"))
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv',force=TRUE)
library(slidify)
getwd()
author("Pixel_Data_Products_app")
